<?php

namespace Proxies\__CG__\Lljm\HomeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Eleclog extends \Lljm\HomeBundle\Entity\Eleclog implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['daterx' => NULL, 'metervalue' => NULL];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->daterx, $this->metervalue);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'id', 'daterx', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'meterid', 'metervalue', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'consumption', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'yearweek', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'yearmonth', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'monthmonth'];
        }

        return ['__isInitialized__', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'id', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'meterid', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'consumption', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'yearweek', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'yearmonth', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Eleclog' . "\0" . 'monthmonth'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Eleclog $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->daterx, $this->metervalue);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDaterx($daterx)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDaterx', [$daterx]);

        return parent::setDaterx($daterx);
    }

    /**
     * {@inheritDoc}
     */
    public function getDaterx()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDaterx', []);

        return parent::getDaterx();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetervalue($metervalue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetervalue', [$metervalue]);

        return parent::setMetervalue($metervalue);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetervalue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetervalue', []);

        return parent::getMetervalue();
    }

    /**
     * {@inheritDoc}
     */
    public function setMeterid(\Lljm\HomeBundle\Entity\Meter $meterid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMeterid', [$meterid]);

        return parent::setMeterid($meterid);
    }

    /**
     * {@inheritDoc}
     */
    public function getMeterid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeterid', []);

        return parent::getMeterid();
    }

    /**
     * {@inheritDoc}
     */
    public function setConsumption($consumption)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConsumption', [$consumption]);

        return parent::setConsumption($consumption);
    }

    /**
     * {@inheritDoc}
     */
    public function getConsumption()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConsumption', []);

        return parent::getConsumption();
    }

    /**
     * {@inheritDoc}
     */
    public function setYearweek($yearweek)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYearweek', [$yearweek]);

        return parent::setYearweek($yearweek);
    }

    /**
     * {@inheritDoc}
     */
    public function getYearweek()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYearweek', []);

        return parent::getYearweek();
    }

    /**
     * {@inheritDoc}
     */
    public function setYearmonth($yearmonth)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYearmonth', [$yearmonth]);

        return parent::setYearmonth($yearmonth);
    }

    /**
     * {@inheritDoc}
     */
    public function getYearmonth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYearmonth', []);

        return parent::getYearmonth();
    }

    /**
     * {@inheritDoc}
     */
    public function setMonthmonth($monthmonth)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMonthmonth', [$monthmonth]);

        return parent::setMonthmonth($monthmonth);
    }

    /**
     * {@inheritDoc}
     */
    public function getMonthmonth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMonthmonth', []);

        return parent::getMonthmonth();
    }

}
