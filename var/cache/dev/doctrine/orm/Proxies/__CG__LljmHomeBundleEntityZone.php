<?php

namespace Proxies\__CG__\Lljm\HomeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Zone extends \Lljm\HomeBundle\Entity\Zone implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'id', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'zonename', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatingenabled', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'tempcomfort', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'tempeco', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'currenttemp', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatingmode', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatingstatus', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatschedule'];
        }

        return ['__isInitialized__', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'id', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'zonename', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatingenabled', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'tempcomfort', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'tempeco', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'currenttemp', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatingmode', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatingstatus', '' . "\0" . 'Lljm\\HomeBundle\\Entity\\Zone' . "\0" . 'heatschedule'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Zone $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setZonename($zonename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setZonename', [$zonename]);

        return parent::setZonename($zonename);
    }

    /**
     * {@inheritDoc}
     */
    public function getZonename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getZonename', []);

        return parent::getZonename();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeatingenabled($heatingenabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeatingenabled', [$heatingenabled]);

        return parent::setHeatingenabled($heatingenabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeatingenabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeatingenabled', []);

        return parent::getHeatingenabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempcomfort($tempcomfort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempcomfort', [$tempcomfort]);

        return parent::setTempcomfort($tempcomfort);
    }

    /**
     * {@inheritDoc}
     */
    public function getTempcomfort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempcomfort', []);

        return parent::getTempcomfort();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempeco($tempeco)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempeco', [$tempeco]);

        return parent::setTempeco($tempeco);
    }

    /**
     * {@inheritDoc}
     */
    public function getTempeco()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempeco', []);

        return parent::getTempeco();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrenttemp($currenttemp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrenttemp', [$currenttemp]);

        return parent::setCurrenttemp($currenttemp);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrenttemp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrenttemp', []);

        return parent::getCurrenttemp();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeatschedule($heatschedule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeatschedule', [$heatschedule]);

        return parent::setHeatschedule($heatschedule);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeatschedule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeatschedule', []);

        return parent::getHeatschedule();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeatingmode($heatingmode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeatingmode', [$heatingmode]);

        return parent::setHeatingmode($heatingmode);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeatingmode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeatingmode', []);

        return parent::getHeatingmode();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeatingstatus($heatingstatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeatingstatus', [$heatingstatus]);

        return parent::setHeatingstatus($heatingstatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeatingstatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeatingstatus', []);

        return parent::getHeatingstatus();
    }

}
